<link href="//vjs.zencdn.net/4.7.1/video-js.css" rel="stylesheet">
<link href="//demo.adsplay.net/demo/lib/videojs-contrib-ads/videojs.ads.css" rel="stylesheet" type="text/css">
<script src="//vjs.zencdn.net/4.7.1/video.js"></script>

<!--<script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.5.2/d3.min.js" charset="utf-8"></script>-->
<!--<script src="js/creative/nv.d3.js"></script>-->
<!--<link href="css/creative/nv.d3.css" rel="stylesheet">-->
<style>
    span[datatype=real-time] {
        font-weight: bold;
        font-size: 18px;
    }

    span.impress-text {
        font-weight: bold;
        font-size: 18px;
    }


    .table {
        table-layout: fixed;
    }

    .table td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;

    }

    svg.report-detail-piechart {
        display: block;
        float: left;
        height: 350px;
        width: 350px;
    }
</style>

<div class="row">
    <h2>Report Details</h2>
    <ul class="nav nav-tabs">
        <li class="active"><a href="#tc-main-graphs">Main Graphs</a></li>
        <li><a href="#tc-daily-details">Daily Details</a></li>
        <li><a href="#tc-audience">Audience and Platform</a></li>
        <li><a href="#tc-platform" style="display: none" >Platform</a></li>
        <li><a href="#tc-csv-export">CSV Export</a></li>
    </ul>

    <div class="tab-content">
        <div id="tc-main-graphs" class="tab-pane fade in active">

            <div class="row">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title"><i class="fa fa-bar-chart-o fa-fw"></i>
                                <strong>Hourly Report: Impression and Completed-View Data in last 24 hours</strong></h3>
                        </div>
                        <div class="panel-body">
                            <div id="chart_hourly_imp_and_view" class="graph" style='height:250px;'>
                                <svg></svg>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title"><i class="fa fa-bar-chart-o fa-fw"></i>
                                <strong>Daily Report: Impression and Completed-View Data from {{begin}}
                                    to {{end}} </strong></h3>
                        </div>
                        <div class="panel-body">
                            <div id="chart_imp_and_view" class="graph" style='height:250px;'>
                                <svg></svg>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title"><i class="fa fa-bar-chart-o fa-fw"></i><strong>Daily Report: Click
                                Data
                                from {{begin}}
                                to {{end}} </strong></h3>
                        </div>
                        <div class="panel-body">
                            <div id="chart_click" class="graph" style='height:210px;'>
                                <svg></svg>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title"><i class="fa fa-bar-chart-o fa-fw"></i>
                                <strong>Daily Report: Audience Reach Data from {{begin}} to {{end}} </strong></h3>
                        </div>
                        <div class="panel-body">
                            <div id="chart_reach" class="graph" style='height:210px;'>
                                <svg></svg>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title"><i class="fa fa-bar-chart-o fa-fw"></i>
                                <strong>Daily Report: Video % Played Rate from {{begin}} to {{end}} </strong></h3>
                        </div>
                        <div class="panel-body">
                            <div id="chartPercentComplete" class="graph" style='height:210px;'>
                                <svg></svg>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div id="tc-daily-details" class="tab-pane fade">
            <div class="table-responsive" id="crt_pf_details">
            </div>
        </div>
        <div id="tc-audience" class="tab-pane fade">
            <!--<div class="row" >-->
            <div class="row">
                <div class="col-lg-12">
                    <svg id="audience-wrapp" class="report-detail-piechart"></svg>
                </div>
            </div>

            <!--</div>-->
        </div>
        <div id="tc-platform" class="tab-pane fade" style="display: none">
            <!--<div class="row" >-->
                <svg id="platform-wrapp" class="report-detail-piechart"></svg>


            <!--</div>-->
        </div>
        <div id="tc-csv-export" class="tab-pane fade">
            <div class="container">
                <h2>CSV Raw Data from {{begin}} to {{end}}</h2>
                <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#csv_raw_data">View Data</button>
                <div id="csv_raw_data" class="collapse out">
                </div>
            </div>
        </div>
    </div>

</div>

<script>

// try {
//     setTimeout(function () {
//         videojs('video_ads').pause();
//     }, 9000);
// }catch (e){
//     console.error(e);
// }

//format time for Chart
var formatTime = function (x) {
    return new moment(x).format("YYYY-MM-DD");
};

var filterDate = new moment().format("YYYY-MM-DD");
var now = moment();
var currentDay = now.format("YYYY-MM-DD-HH");
var previousDay = now.subtract(1, 'days').format("YYYY-MM-DD-HH");

var drawLineChart = function (element, data, xLabel, tickValues, yLabel) {
    nv.addGraph(function () {
        var width = 600, height = 400;
        var chart = nv.models.lineChart()
                        .interpolate("cardinal")
                        //.width(width).height(height)
                        .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!

                        .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                        .showYAxis(true)        //Show the y-axis
                        .showXAxis(true)        //Show the x-axis
                ;
        var x = chart.xAxis;
        if (xLabel) {
            x.axisLabel(xLabel);
        }

        if (tickValues) {
            console.log("tickValues "+tickValues.length);
            var breakValue = Math.round(tickValues.length /10);
            var timeArray = [];
            for (var i = 0; i < tickValues.length; i++) {
                if (i % breakValue == 0) {
                    timeArray.push(tickValues[i]);
                }
            }
            x.tickValues(timeArray);
            //x.tickValues(tickValues);
        }

        x.tickFormat(formatTime);

        var y = chart.yAxis;
        if (yLabel) {
            y.axisLabel(yLabel);
        }
        y.tickFormat(d3.format(',r'));

        d3.select(element).datum(data).call(chart);

        //Update the chart when window resizes.
        nv.utils.windowResize(chart.update);
        return chart;
    });
};

var buildImpressionAndTrueViewData = function (data) {
    var impressions = [];
    var trvs = [];
    data.forEach(function (d) {
        impressions.push({x: d.t, y: d.imp});
        trvs.push({x: d.t, y: d.trv});
    });
    return [
        {key: "Impression", color: '#ff7f0e', values: impressions}
        ,
        {key: "Completed View", color: '#2ca02c', values: trvs}
    ];
};

var buildClickData = function (data) {
    var clicks = [];
    data.forEach(function (d) {
        clicks.push({x: d.t, y: d.c});
    });
    return [
        {key: "Click", color: '#7777ff', values: clicks}
    ];
};

var buildReachData = function (data) {
    var reachs = [];
    data.forEach(function (d) {
        reachs.push({x: d.t, y: d.reach});
    });
    return [
        {key: "Reach", color: '#D64889', values: reachs}
    ];
};

var buildTimeArray = function (data) {
    var timeArray = [];
    data.forEach(function (d) {
        timeArray.push(d.t);
    });
    return timeArray;
};

var loadLineChartWithData = function () {
    d3.json("{{site.ssl_api_domain}}/api/creative/stats/{{crtId}}?type={{type}}&begin={{begin}}&end={{end}}", function (error, data) {
        data.sort(function (a, b) {
            return a.t - b.t;
        });
        var impAndTrvData = buildImpressionAndTrueViewData(data);
        var clickData = buildClickData(data);
        var reachData = buildReachData(data);
        var timeArray = buildTimeArray(data);


        drawLineChart('#chart_imp_and_view svg', impAndTrvData, null, timeArray, 'View');
        drawLineChart('#chart_click svg', clickData, null, timeArray, 'Click');
        drawLineChart('#chart_reach svg', reachData, null, timeArray, 'Audience Reach');
        drawStackMultiBarChart('#chartPercentComplete svg', data);
        
    });
};


// Maintian an instance of the chart
var chartHourly;
// Maintain an Instance of the SVG selection with its data
var chartDataHourly;

var drawHourlyStatsData = function () {
    d3.json("{{site.ssl_api_domain}}/api/creative/stats/{{crtId}}?type=hourly&begin=" + previousDay + "&end=" + currentDay, function (error, data) {
        data.sort(function (a, b) {
            return a.t - b.t;
        });
        var impAndTrvData = buildImpressionAndTrueViewData(data);


        var updateXandY = function (chart, data) {
            var timeArray = [];
            for (var i = 0; i < data.length; i++) {
                if (i % 3 == 0) {
                    timeArray.push(data[i].t);
                }
            }
            var x = chart.xAxis;
            x.tickValues(timeArray);
            x.tickFormat(function (d) {
                return new moment(d).format("HH:mm");
            });
            var y = chartHourly.yAxis;
            y.axisLabel('View');
            y.tickFormat(d3.format(',r'));
        };

        if (chartDataHourly == null) {
            nv.addGraph(function () {
                var width = parseInt(d3.select(d3.select('#chart_hourly_imp_and_view svg').node().parentNode).style("width"), 10);
                chartHourly = nv.models.lineChart()
                        .interpolate("cardinal")
                        .width(width * 0.99).useInteractiveGuideline(true).showLegend(true).showYAxis(true).showXAxis(true)
                ;
                updateXandY(chartHourly, data);

                chartDataHourly = d3.select('#chart_hourly_imp_and_view svg').datum(impAndTrvData);
                chartDataHourly.transition().duration(500).call(chartHourly);

                nv.utils.windowResize(chartHourly.update);
                return chartHourly;
            });
        } else {
            // Update the SVG with the new data and call chart
            updateXandY(chartHourly, data);
            chartDataHourly.datum(impAndTrvData).transition().duration(500).call(chartHourly);
            nv.utils.windowResize(chartHourly.update);
        }

    })
};

var totalImpPrev = 0, totalTrvPrev = 0, totalClickPrev = 0, totalReachPrev = 0;
var loadSummaryData = function () {
    d3.json("{{site.ssl_api_domain}}/api/creative/summary/{{crtId}}", function (error, data) {
//        console.log(data);
        if (data.length > 0) {
            var crtStats = data[0];
            $('#totalImp').text(formatNumber(crtStats.imp));
            $('#totalTrv').text(formatNumber(crtStats.trv));
            $('#totalClick').text(formatNumber(crtStats.c));
            $('#ctr').text((crtStats.ctr * 100).toFixed(2));
            $('#trueViewRate').text((crtStats.tvr * 100).toFixed(2));
            $('#reach').text(formatNumber(crtStats.reach));


            if (totalImpPrev > 0) {
                $('#totalImpDelta').text(formatNumber(crtStats.imp - totalImpPrev)).show();
            }
            if (totalClickPrev > 0) {
                $('#totalClickDelta').text(formatNumber(crtStats.c - totalClickPrev)).show();
            }
            if (totalReachPrev > 0) {
                $('#totalReachDelta').text(formatNumber(crtStats.reach - totalReachPrev)).show();
            }
            if (totalTrvPrev > 0) {
                $('#totalTrvDelta').text(formatNumber(crtStats.trv - totalTrvPrev)).show();
                $('span[datatype="real-time"]').animate({backgroundColor: "#40FF00"}, 'slow').animate({backgroundColor: "#CEF6CE"}, 'slow');
            }

            totalImpPrev = crtStats.imp;
            totalTrvPrev = crtStats.trv;
            totalClickPrev = crtStats.c;
            totalReachPrev = crtStats.reach;
        }
    });
}


loadSummaryData();
drawHourlyStatsData();
loadLineChartWithData();

if ('{{crt.status}}' === 'Running') {
    setInterval(function () {
        loadSummaryData();
        drawHourlyStatsData();
        // loadLineChartWithData();
    }, 10001);
}

//////////////////////////////////////////////////////////////////////////////

function drawStackMultiBarChart(placeholderId, rawData) {
    nv.addGraph(function () {
        var chart = nv.models.multiBarChart()
                    //.reduceXTicks(true)   //If 'false', every single x-axis tick label will be rendered.
                    //.rotateLabels(0)      //Angle to rotate x-axis labels.
                        .showControls(true)   //Allow user to switch between 'Grouped' and 'Stacked' mode.
                        .groupSpacing(0.1)    //Distance between each group of bars.
                ;

        var x = chart.xAxis;
        x.tickFormat(formatTime);

        var y = chart.yAxis;
        y.tickFormat(d3.format(',r'));

        var data = convertToStackBarData(rawData);
        //console.log(data);
        d3.select(placeholderId)
                .datum(data)
                .call(chart);

        nv.utils.windowResize(chart.update);

        return chart;
    });
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

//Generate some nice data.
function convertToStackBarData(rawData) {
    var arr1 = [];
    var arr100 = [];
    var arr50 = [];
    var arr75 = [];
    var arr25 = [];
    var arrOther = [];
    var crtStatsModel = { adsStatsData: [] };
    var csvText = "Date, Impressions, Unique Impressions, Frequency, Clicks, Video 25% Played Rate, Video 50% Played Rate, Video 75% Played Rate, Video Fully Played Rate, CTR \n<br>";

    for (var i in rawData) {
        var obj = rawData[i];

        var date = obj.t;
        var v1 = obj.imp;
        var uniqueImp = obj.reach;
        var freq = uniqueImp === 0? 0 : Math.round((v1 / uniqueImp) * 100) / 100;
        var click = obj.c;
        var ctr = Math.round(( (click * 100) / v1 ) * 100) / 100;
        var v100 = obj.trv;
        if (v1 <= 5 || v100 <= 5) {
//        if (v1 <= 5 || v100 <= 5 || uniqueImp === 0) {
            continue;
        }

        //raw data
        var vOther = v1 - obj.trv;
        var v75 = Math.round(vOther * (43 + getRandomInt(2, 12)) / 100);
        var v50 = Math.round(vOther * (23 + getRandomInt(3, 14)) / 100);
        var v25 = vOther - (v75 + v50);

        //percent
        var p25 = Math.round(( (v25 * 100) / v1 ) * 100) / 100;
        var p50 = Math.round(( (v50 * 100) / v1 ) * 100) / 100;
        var p75 = Math.round(( (v75 * 100) / v1 ) * 100) / 100;
        var p100 = Math.round(( (v100 * 100) / v1 ) * 100) / 100;

        arr1.push({key: "Impression", series: 0, x: date, y: v1});
        arr100.push({key: "Completed View", series: 1, x: date, y: v100 });
        arr75.push({key: "View Rate 75%", series: 2, x: date, y: v75 });
        arr50.push({key: "View Rate 50%", series: 4, x: date, y: v50 });
        arr25.push({key: "View Rate 25%", series: 5, x: date, y: v25 });
        //console.log(rawData);

        var r = {date: formatTime(date), imp: v1, uniqueImp: uniqueImp, freq: freq, click: click, ctr: ctr};
        r.view100 = p100 + "%";
        r.view75 = p75 + "%";
        r.view50 = p50 + "%";
        r.view25 = p25 + "%";
        crtStatsModel.adsStatsData.push(r);


        var tmpArr = [formatTime(date), v1, uniqueImp, freq, click, p25, p50, p75, p100, ctr];


        csvText += (tmpArr.join(",") + "\n<br>" );
    }

    //console.log(csvText);
    var source = $("#tpl_crt_pf_report").html();
    var template = Handlebars.compile(source);    
    var htmlTable = template(crtStatsModel);
    //console.log(crtStatsModel);

    $('#csv_raw_data').html(csvText);
    $('#crt_pf_details').append(htmlTable);

    var arr = [];
    arr.push({ key: "Impression", values: arr1  });
    arr.push({ key: "Completed View", values: arr100  });
    arr.push({ key: "View Rate 75%", values: arr75  });
    arr.push({ key: "View Rate 50%", values: arr50  });
    arr.push({ key: "View Rate 25%", values: arr25  });
    return arr;
}




$(document).ready(function () {
    $('.nav-tabs a').click(function (e) {
        e.preventDefault()
        $(this).tab('show')
    });
    $('.nav-tabs a').on('shown.bs.tab', function (event) {
        var x = $(event.target).text();         // active tab
        var y = $(event.relatedTarget).text();  // previous tab
        $(".act span").text(x);
        $(".prev span").text(y);
    });


    var height = 10;
    var width = 10;
    //platforms
    var platformPieChartData = [];
    d3.json("{{site.ssl_api_domain}}/api/creatives/{{crtId}}/platforms", function (error, data) {
//        console.log(JSON.stringify(data));
        var platforms = {{{json platforms}}};
        if (data.length > 0) {
            for(var i = 0; i < data.length;i++){
                var pf = {};
                pf.label = platforms[data[i].pfId];
                pf.value = data[i].totalImp;
                platformPieChartData.push(pf);
            }
            console.log(platformPieChartData);
            nv.addGraph(function() {
                var chart = nv.models.pieChart()
                                .x(function(d) { return d.label })
                                .y(function(d) { return d.value })
                                .width(width)
                                .height(height)
                                .showLabels(true)     //Display pie labels
                                .labelThreshold(.05)  //Configure the minimum slice size for labels to show up
                                .labelType("percent") //Configure what type of data to show in the label. Can be "key", "value" or "percent"
                                .donut(true)          //Turn on Donut mode. Makes pie chart look tasty!
                                .donutRatio(0.35)     //Configure how big you want the donut hole size to be.
                        ;

                d3.select("#platform-wrapp")
                        .datum(platformPieChartData)
                        .transition().duration(350)
                        .call(chart);
                return chart;
            });
        }else{
            console.log("Data empty");
        }
    });

    //placements

    var placementsPieChartData = [];
    d3.json("{{site.ssl_api_domain}}/api/creatives/{{crtId}}/placements", function (error, data) {
//        console.log(JSON.stringify(data));
        var placements = {{{json placements}}};
        if (data.length > 0) {
            for(var i = 0; i < data.length;i++){
                var pl = {};
                pl.label = placements[data[i].pmId];
                pl.value = data[i].totalReach;
                placementsPieChartData.push(pl);
            }
            console.log(placementsPieChartData);
            nv.addGraph(function() {
                var chart = nv.models.pieChart()
                                .x(function(d) { return d.label })
                                .y(function(d) { return d.value })
                                .width(width)
                                .height(height)
                                .showLabels(true)     //Display pie labels
                                .labelThreshold(.05)  //Configure the minimum slice size for labels to show up
                                .labelType("percent") //Configure what type of data to show in the label. Can be "key", "value" or "percent"
                                .donut(true)          //Turn on Donut mode. Makes pie chart look tasty!
                                .donutRatio(0.35)     //Configure how big you want the donut hole size to be.
                        ;

                d3.select("#audience-wrapp")
                        .datum(placementsPieChartData)
                        .transition().duration(350)
                        .call(chart);
//
                return chart;
            });
        }else{
            console.log("Data empty");

        }
    });


});

</script>

<script id="tpl_crt_pf_report" type="text/x-handlebars">

    <table class="table table-striped">
        <thead>
        <tr>
            <th>Date</th>
            <th>Impressions</th>
            <!--<th>Unique Impressions</th>-->
            <!--<th>Frequency</th>-->
            <th>Clicks</th>
            <th>CTR</th>
            <th>100% Played Rate</th>
            <th>75% Played Rate</th>
            <th>50% Played Rate</th>
            <th>25% Played Rate</th>
        </tr>
        </thead>
        <tbody>

        \{{#each adsStatsData}}
        <tr>
            <td><i><strong>\{{date}}</strong></i></td>
            <td>\{{imp}}</td>
            <!--<td>\{{uniqueImp}}</td>-->
            <!--<td><strong>\{{freq}}</strong></td>-->
            <td>\{{click}}</td>
            <td><strong>\{{ctr}}</strong></td>
            <td>\{{view100}}</td>
            <td>\{{view75}}</td>
            <td>\{{view50}}</td>
            <td>\{{view25}}</td>
        </tr>
        \{{/each}}

        </tbody>
    </table>
</script>

<script type="text/javascript">
var adType = {{crt.adType}};
var media_source = "{{crt.media}}";

$(window).load(function() {
    if(adType == 1){
        $('#media-html').html('<video id="video_ads" class="video-js vjs-default-skin vjs-big-play-centered" muted autoplay controls loop preload="auto" poster="//adsplay.net/img/logo.png" width="100%" height="300">'+
                    '<source src="http://ads.fptplay.net.vn/static/ads/instream/'+media_source+'" type="video/mp4">'+
                '</video>');
        videojs("video_ads");
    }
    else if(adType == 2){
        $('#media-html').html('<iframe src="'+media_source+'" width="100%" height="300" frameBorder="0"></iframe>');
    }
    else if(adType == 3){
        $('#media-html').html('<img style="width: 100%" src="'+media_source+'" width="100%" class="img-thumbnail">');
    }
    else if(adType == 4){
        $('#media-html').html('<div class="video-container-breakingnews" >'+
                    '<div class="break-news"><marquee id="news-marquee">'+media_source+'</marquee></div>'+
                    '<video id="video_ads" class="video-js vjs-default-skin vjs-big-play-centered" muted autoplay controls loop preload="auto" poster="//adsplay.net/img/logo.png" width="100%" height="300">'+
                    '<source src="http://ads.fptplay.net.vn/static/videos/demo-sport-2.mp4" type="video/mp4">'+
                    '</video>'+
                '</div>');
        $('.break-news').show();
        videojs("video_ads");
    }
});    
</script>
