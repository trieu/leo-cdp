<style type="text/css">
	svg{
		min-height: 400px;
	}
	 .dashed {
            stroke-dasharray: 5,5;
    }
</style>

<div class="row">
    <div class="col-lg-12">
        <h1 class="page-header">
            Forecasting Ad Inventory
        </h1>
        <div class="alert alert-info" role="alert">
            The number of playview in next 24 hours
        </div>
    </div>
</div>

<div class="panel panel-default" id="predicted1">
</div>

<div class="panel panel-default" id="predicted4">
</div>

<div class="panel panel-default" id="predicted5">
</div>

<script>

    $.ajax({
        url: 'monitor/inventory-predicted/api',
        type: "GET",
        dataType: 'json',
        success: function(data){ 
            render_chart("#predicted1", "PC Web", data, 1);
            render_chart("#predicted4", "Mobile App", data, 4);
            render_chart("#predicted5", "Smart TV", data, 5);
        }
    });

    function render_chart(placement, title, data, id){
        var chart;
        var heading = $('<div class="panel-heading"></div>');
        var body = $('<div class="panel-body"><svg></svg></div>');
        $(placement).append(heading).append(body);
        heading.text(title);

        nv.addGraph(function() {
            chart = nv.models.lineChart();

            chart.xAxis
                .axisLabel("Times")
                .tickFormat(function(x) {
                    // var s = new moment(x).format("YYYY-MM-DD");
                    var s = new moment(x).format("h.a - D/M/YYYY");
                    // console.log(s);
                    return s;
                });

            chart.yAxis
                .axisLabel('Views')
                .tickFormat(function(d) {
                    if (d == null) {
                        return 'N/A';
                    }
                    return d3.format(',.0d')(d);
                });

            data = buildData(data, id);

            d3.select(placement+ ' svg')
                .datum(data)
                .call(chart);

            nv.utils.windowResize(chart.update);

            return chart;
        });

    }

     function buildData(data, id) {

        var sincur =[];
        var sinpred = [];
       
        var CurrentDate = new Date();
        var parseTimeNow = Date.parse(CurrentDate);
        var prevDay = parseTimeNow - 259200000;//3 day ago
        var tmp_time = prevDay, tmp_views;

        for(var key in data) {
            if(data[key].pfId !== id) continue

            var TimePred = new Date(data[key].time);
            var TimeCurPred = Date.parse(TimePred);

            //current
            if(TimeCurPred <= parseTimeNow) {
                if(TimeCurPred>=prevDay) {
                    for(var i = 0 ; i< data[key].pred_views.length; i++){
                        for(var i = 0 ; i< data[key].pred_views.length; i++) {
                            time = Date.parse(data[key].pred_views[i].time) - 18000000;
                            views = parseInt(data[key].pred_views[i].pred);
                            sincur.push({ x: time, y: views});
                            if(time > tmp_time) {
                                tmp_time = time;
                                tmp_views = views;
                            }
                        }
                    }
                }
            }
        }
        // Link current data and predict data
        sinpred.push({x: tmp_time, y: tmp_views});
        for(var key in data) {
            if(data[key].pfId !== id) continue

            var TimePred = new Date(data[key].time);
            var TimeCurPred = Date.parse(TimePred);

            //Predict
            if(TimeCurPred > parseTimeNow) {
                for(var j = 0 ; j< data[key].pred_views.length; j++) {
                    sinpred.push(
                        {
                            x:Date.parse(data[key].pred_views[j].time) -18000000, 
                            y:parseInt(data[key].pred_views[j].pred)
                        }
                    );
                 }
                 
            }
        }
        
      
        return [
            {
                // area: true,
                values: sincur,
                key: "Reporting View",
                color: "#ff7f0e",
                strokeWidth: 6
                
            },
            {
                values: sinpred,
                key: "Forecasting View",
                color: "#2ca02c",
                  strokeWidth: 4,
                  classed: 'dashed'

                // area: true
            }
        ];
    }     
</script>