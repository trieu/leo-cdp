group 'leocms'
version '1.0'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

eclipse {
    project {
        name = 'LeoTech-Core-System'
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven {
    	url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations.all {
   exclude module: 'ch.qos.logback'
}

dependencies {
	
	// Joda Time https://www.joda.org/joda-time/index.html
	compile group: 'joda-time', name: 'joda-time', version: '2.10.6'
	
	// Crawler4J
	compile group: 'com.sleepycat', name: 'je', version: '18.3.1'
	compile group: 'edu.uci.ics', name: 'crawler4j', version: '4.4.0'
	
	// Google OAuth
	compile group: 'com.google.oauth-client', name: 'google-oauth-client', version: '1.30.6'    
	compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: '1.30.6'    
	
	// YouTube Data API	
	compile group: 'com.google.apis', name: 'google-api-services-youtube', version: 'v3-rev222-1.25.0'
	
	// Blogger Data API
	compile group: 'com.google.apis', name: 'google-api-services-blogger', version: 'v3-rev82-1.25.0'
	
	// Facebook API
	compile group: 'com.restfb', name: 'restfb', version: '3.7.0'
	
	// Boilerpipe Text Extraction library
	compile group: 'net.htmlparser.jericho', name: 'jericho-html', version: '3.4'
	compile group: 'xerces', name: 'xercesImpl', version: '2.11.0'
	compile group: 'net.sourceforge.nekohtml', name: 'nekohtml', version: '1.9.22' 
	
	// library for document conversion of a docx file into a pdf file  
	compile group: 'com.documents4j', name: 'documents4j-api', version: '1.1.3'
	compile group: 'com.documents4j', name: 'documents4j-local', version: '1.1.3'
	compile group: 'com.documents4j', name: 'documents4j-transformer-msoffice-base', version: '1.1.3'
	compile group: 'com.documents4j', name: 'documents4j-transformer-msoffice-excel', version: '1.1.3'
	compile group: 'com.documents4j', name: 'documents4j-transformer-msoffice-word', version: '1.1.3'
	
	// TSV parser
	compile group: 'com.univocity', name: 'univocity-parsers', version: '2.8.4'
	
	// PDF utils
	compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.20'
	
	// Google Analytics API
	compile group: 'com.brsanthu', name: 'google-analytics-java', version: '2.0.0'	
	
	// simple, stupid rules engine 
	compile group: 'org.jeasy', name: 'easy-rules-core', version: '4.0.0'
	
	// To backup database, we can use AWS Amazon S3 for raw data storage
	compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.826'
	
	// A library for summarizing data in streams for which it is infeasible to store all events 
	compile group: 'com.clearspring.analytics', name: 'stream', version: '2.9.8'
	
	// for Java batch processing system
	compile group: 'org.jobrunr', name: 'jobrunr', version: '0.9.13'
	
	// high-quality thumbnails from existing images
	compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.11'
	
	// core STMP client for email marketing
	compile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
	
	// Sendgrid email service
	compile group: 'com.sendgrid', name: 'sendgrid-java', version: '4.6.3'
	
	// generate html and text mail via one fluent build from https://github.com/rocketbase-io/email-template-builder
	compile group: 'io.rocketbase.mail', name: 'email-template-builder', version: '2.0.0'
	
    compile (	   
		fileTree(dir: 'ext-lib', include: '**/*.jar') 	
    		    	
    	// common	 	
    	,'io.vertx:vertx-core:3.8.5'			
		,'io.vertx:vertx-web:3.8.5'
		,'io.vertx:vertx-codegen:3.8.5'
		,'com.google.code.gson:gson:2.8.2'
		
		,'org.apache.logging.log4j:log4j-api:2.13.2'
		,'org.apache.logging.log4j:log4j-core:2.13.2'
		,'org.slf4j:slf4j-api:1.7.30'
		,'org.slf4j:slf4j-simple:1.7.30'
		
		,'org.jsoup:jsoup:1.13.1'					
		,'org.apache.commons:commons-lang3:3.3.2'
		,'commons-net:commons-net:3.6'    		
		,'commons-io:commons-io:2.5'
		,'redis.clients:jedis:2.10.2'
		,'org.apache.httpcomponents:httpclient:4.5.9'
		,'com.google.guava:guava:23.0'
		,'org.databene:contiperf:2.3.4'
		,'com.google.javascript:closure-compiler:v20200719'
		,'com.github.jknack:handlebars:4.2.0'
		,'com.github.spullara.mustache.java:compiler:0.9.6'
		,'org.yaml:snakeyaml:1.18' 
				
		// Friendly Content ID
		,'com.devskiller.friendly-id:friendly-id:1.1.0'	
						
		// SEO util
		,'com.github.slugify:slugify:2.4'
		,'net.gcardone.junidecode:junidecode:0.4.1'   
			
		// Maxmind Geolocation
		,'com.maxmind.geoip2:geoip2:2.14.0'	
		,'com.google.openlocationcode:openlocationcode:1.0.4'

		// primary database of core system
		,'com.arangodb:arangodb-java-driver:6.7.1'
            
		// for Math library
		,'org.apache.commons:commons-math3:3.6.1'			
            
		// for Embebded OpenSSP Ad Server
		,'com.squareup.okhttp3:okhttp:3.14.9'
		,'javax.servlet:javax.servlet-api:3.1.0'
	
		// for raw data tracking database
		,'ru.yandex.clickhouse:clickhouse-jdbc:0.2.4'
		
		// Image Processing Libs: Headline + Watermark + Visual Image  Generator
		,'org.docx4j.org.capaxit.textimage:TextImageGen:1.9'
		,'com.github.jai-imageio:jai-imageio-core:1.4.0'
		
		// Web Crawler for Ajax website, need correct version of Chromedriver at https://chromedriver.chromium.org/downloads
		,'org.seleniumhq.selenium:selenium-java:3.141.59'
    ) 
    	
    testCompile (
    	'org.testng:testng:6.14.3'
    	,'junit:junit:4.12'    	
		,'com.rabriel:given-when-then:0.1.2' 
		,'org.springframework:spring-test:4.3.14.RELEASE'	
		,'org.assertj:assertj-core:3.10.0'
		,'org.seleniumhq.selenium:selenium-java:3.141.59'
		
		// Performance Testing
		,'org.databene:contiperf:2.3.4'
		
		// generates fake data for testing
		,'com.github.javafaker:javafaker:1.0.2'
		
		// Email Test
		,'com.sun.mail:javax.mail:1.6.2'
    )
}


uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

tasks.withType(Jar) {
	destinationDir = file("$rootDir/BUILD-OUTPUT")
}


def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

/////////////////////////// EBGIN COPY TASKS ///////////////////////////////

// copy dependency libs
task CopyRuntimeLibsFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/deps"  
  from configurations.compile  
}

// copy configs
task CopyConfigsFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/configs"  
  from files('configs')
}

// copy templates
task CopyResourceTemplatesFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/resources/tpl"  
  from files('resources/app-templates')
}

// copy resources
task CopyResourcesFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/resources"  
  from files('resources')
}

// copy public folder
task CopyPublicFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/public"  
  from files('public')
}

// copy shell-scripts
task CopyShellScripts(type: Copy) {  
  into "BUILD-OUTPUT"  
  from files('shell-scripts')
}

/////////////////////////// END COPY TASKS ///////////////////////////////

/////////////////////////// BEGIN BUILD FOR DEPLOYED JAR ///////////////////////////////
task buildMainHttpStarter(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'leo-main-starter'
    manifest {
   		attributes ('Implementation-Title': 'MainHttpStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': ' leotech.starter.MainHttpStarter',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
} 

task buildDataObserverStarter(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'leo-data-observer'
    manifest {
   		attributes ('Implementation-Title': 'DataObserverStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': ' leotech.starter.DataObserverStarter',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
}

task buildUploadFileHttpStarter(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'leo-uploader'
    manifest {
   		attributes ('Implementation-Title': 'UploadFileHttpStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': ' leotech.starter.UploadFileHttpStarter',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
}

task buildInfoDeliveryHttpStarter(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'leo-info-delivery'
    manifest {
   		attributes ('Implementation-Title': 'InfoDeliveryHttpStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': ' leotech.starter.InfoDeliveryHttpStarter',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
}

task BuildAdminApiHttpStarter(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'leo-admin-system-api'
    manifest {
   		attributes ('Implementation-Title': 'AdminApiHttpStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': ' leotech.starter.AdminApiHttpStarter',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
}



/////////////////////////// END BUILD FOR DEPLOYED JAR ///////////////////////////////

// deploy jar to Remote Servers and restart all
task AutoBuildAndDeployToRemoteServers(type: Exec) {    
    commandLine 'sh', './shell-scripts/deploy-ad-server.sh'
}

// just restart all servers
task RestartAllServers(type: Exec) {    
    commandLine 'sh', './shell-scripts/restart-all-ad-servers.sh'
}

