############# AQL LEO CMS - POST  ########################################################################################################;

AQL_GET_POST_BY_ID =>
	FOR p in cms_post FILTER p.id == @id  
	RETURN p
;

AQL_GET_POST_BY_SLUG =>
	FOR p in cms_post FILTER p.slug == @slug  
	RETURN p
;

AQL_GET_POSTS_BY_NETWORK =>
	FOR p in cms_post FILTER p.networkId == @networkId 
	SORT p.modificationTime DESC
	LIMIT @startIndex,@numberResult 
	RETURN p
;

AQL_GET_POSTS_BY_PAGE =>
	FOR p in cms_post FILTER @pageId IN p.pageIds[*]
	SORT p.modificationTime DESC
	LIMIT @startIndex,@numberResult 
	RETURN p
;

AQL_GET_ALL_POSTS_BY_PAGE =>
	FOR p in cms_post FILTER @pageId IN p.pageIds[*]
	SORT p.modificationTime DESC
	RETURN p
;

AQL_GET_ALL_POSTS_BY_CATEGORY_OR_PAGE =>
	FOR p in cms_post FILTER @categoryKey IN p.categoryKeys[*] OR @pageId IN p.pageIds[*] 
	SORT p.modificationTime DESC
	RETURN p
;

AQL_GET_POSTS_BY_OWNER =>
	FOR p in cms_post FILTER p.ownerId == @ownerId
	LIMIT @startIndex,@numberResult 
	RETURN p
;

AQL_GET_VIEWABLE_POSTS_BY_PAGE =>
	FOR p in cms_post FILTER @pageId IN p.pageIds[*] AND (p.ownerId == @ownerId OR p.privacyStatus == 0)
	LIMIT @startIndex,@numberResult 
	RETURN p
;


AQL_GET_KEYWORDS_OF_ALL_POSTS =>
	LET list = (FOR doc IN post FILTER LENGTH( doc.keywords ) > 0 return doc.keywords)
	RETURN {"keywords" : FLATTEN(list,3)}
;

########### AQL LEO CMS - PAGE  ########################################################################################################;

AQL_GET_PAGE_BY_ID =>
	FOR p in cms_page FILTER p.id == @id  
	RETURN p
;

AQL_GET_PAGE_BY_SLUG =>
	FOR p in cms_page FILTER p.slug == @slug  
	RETURN p
;

AQL_GET_PAGES_BY_NETWORK =>
	FOR p in cms_page FILTER p.networkId == @networkId 
	LIMIT @startIndex,@numberResult 
	SORT p.modificationTime DESC
	RETURN p
;

AQL_GET_ALL_PAGES_BY_CATEGORY =>
	FOR p in cms_page FILTER @categoryKey IN p.categoryKeys[*]
	SORT p.modificationTime DESC
	RETURN p
;

AQL_GET_PUBLIC_PAGES_BY_CATEGORY =>
	FOR p in cms_page FILTER p.privacyStatus == 0 AND @categoryKey IN p.categoryKeys[*]
	SORT p.modificationTime DESC
	RETURN p
;

########### AQL LEO CMS - CATEGORY  ########################################################################################################;

AQL_FIND_KEY_BY_SLUG =>
	FOR p in cms_category FILTER p.slug == @slug  
	RETURN p._key
;

AQL_GET_CATEGORY_BY_KEY =>
	FOR p in cms_category FILTER p._key == @_key  
	RETURN p
;

AQL_GET_ALL_CATEGORIES_BY_NETWORK =>
	FOR p in cms_category FILTER p.networkId == @networkId 
	RETURN p
;

########### AQL LEO Platform - USER LOGIN ########################################################################################################;
AQL_FIND_KEY_BY_USERLOGIN => 
	FOR u in system_user FILTER u.userLogin == @userLogin  
	RETURN u._key
;

AQL_GET_USER_BY_USERLOGIN => 
	FOR u in system_user FILTER u.userLogin == @userLogin  
	RETURN u
;

AQL_GET_USER_BY_KEY => 
	FOR u in system_user FILTER u._key == @key  
	RETURN u
;

AQL_GET_ALL_USERS_IN_NETWORK => 
	FOR u in system_user FILTER u.networkId == @networkId  
	RETURN u
;

########### AQL LEO CMS - FILE_METADATA  ########################################################################################################;
AQL_GET_FILE_METADATA_BY_PATH => 
	FOR f in cms_filemetadata FILTER f.path == @path  
	RETURN f
;

AQL_GET_FILE_METADATA_BY_NETWORK_ID => 
	FOR f in cms_filemetadata FILTER f.networkId == @networkId  
	RETURN f
;

AQL_GET_FILE_METADATA_BY_OWNER_ID => 
	FOR f in cms_filemetadata FILTER f.ownerLogin == @ownerLogin  
	RETURN f
;

AQL_GET_FILE_METADATA_BY_OBJECT => 
	FOR f in cms_filemetadata FILTER f.refObjectClass == @refObjectClass AND f.refObjectKey == @refObjectKey  
	RETURN f
;

########### AQL LEO CDP - TOUCHPOINT  ########################################################################################################;

AQL_GET_TOUCHPOINT_BY_ID =>
	FOR e in cdp_touchpoint FILTER e._key == @id  
	RETURN e
;

AQL_GET_TOUCHPOINTS => 
	FOR e in cdp_touchpoint 
	SORT e.createdAt DESC
	LIMIT @startIndex,@numberResult 
	RETURN e
;

AQL_GET_TOUCHPOINT_BY_URL =>
	FOR e in cdp_touchpoint FILTER e.url == @url  
	RETURN e
;

AQL_GET_TOUCHPOINT_BY_NAME =>
	FOR e in cdp_touchpoint FILTER e.name == @name  
	RETURN e
;

AQL_GET_TOUCHPOINTS_BY_FILTER =>
	FOR p in cdp_touchpoint  
	SORT p.createdAt DESC
	LIMIT @startIndex,@numberResult 
	RETURN p
;

AQL_GET_TOP_1000_TOUCHPOINTS_BY_PROFILE =>
	FOR p in cdp_profile FILTER p._key == @profileId
	    FOR t IN cdp_touchpoint
	        FILTER t._key IN p.top1000Touchpoints
	        RETURN t
;

AQL_GET_TOUCHPOINT_FLOW_BY_PROFILE =>
	FOR s in cdp_contextsession FILTER s.profileId == @profileId
        LET refTouchpoints = (
            FOR t IN cdp_touchpoint
            FILTER t._key == s.refTouchpointId
            RETURN DISTINCT t
        )
        LET srcTouchpoints = (
            FOR t IN cdp_touchpoint
            FILTER t._key == s.srcTouchpointId
            RETURN DISTINCT t
        )
        RETURN {"refMediaHost":s.refMediaHost,"createAt":s.createAt,
                "refTouchpoints":refTouchpoints, 
                "srcTouchpoints": srcTouchpoints}
;

########### AQL LEO CDP - PROFILE  ########################################################################################################;

 
AQL_GET_ACTIVE_PROFILES_BY_PAGINATION =>
	FOR p in cdp_profile  
	FILTER p.status > 0 
	SORT p.createdAt DESC
	LIMIT @startIndex,@numberResult 
	RETURN p
; 
 
AQL_GET_PROFILES_BY_PAGINATION =>
	FOR p in cdp_profile  
	SORT p.createdAt DESC
	LIMIT @startIndex,@numberResult 
	RETURN p
;

AQL_GET_PROFILE_BY_ID =>
	FOR e in cdp_profile FILTER e._key == @id  
	RETURN e
;

AQL_GET_PROFILE_BY_PRIMARY_EMAIL =>
	FOR e in cdp_profile FILTER e.primaryEmail == @email  
	RETURN e
;

AQL_GET_PROFILE_BY_IDENTITY =>
	FOR e in cdp_profile FILTER @visitorId IN e.identities[*] AND e.status == 1
	RETURN e
;

AQL_GET_PROFILE_REAL_TIME_IDENTITY_RESOLUTION => 
	LET rs1 = (
        FOR e in cdp_profile 
        FILTER  e.status == 1 AND (@visitorId IN e.identities[*] OR @email IN e.identities[*])
    	RETURN e
    )
	RETURN { "deterministic" : rs1, "probabilistic" : [] }
;

AQL_GET_PROFILE_BY_KEY_IDENTITIES => 
	LET rs1 = (
        FOR e in cdp_profile 
        FILTER  e.status == 1 AND 
        	(
            	@visitorId IN e.identities[*] OR @email IN e.identities[*]
            )
    	RETURN e
    )
    LET rs2 = (
        FOR e in cdp_profile 
        FILTER e.status == 1 AND @fingerprintId IN e.identities[*]
    	RETURN e
    )
	RETURN { "deterministic" : rs1, "probabilistic" : rs2 }
;

AQL_PROFILE_COLLECTOR_TOTAL =>
	FOR d IN cdp_profile
	    FILTER d.status > 0 
	    COLLECT funnelStage = d.funnelStage WITH COUNT INTO length
	    RETURN { "collectorKey" : funnelStage, "collectorCount" : length }
;

AQL_PROFILE_COLLECTOR_IN_DATE_RANGE =>
	FOR d IN cdp_profile
	    FILTER d.status > 0 AND d.createdAt >= @beginFilterDate AND d.createdAt <= @endFilterDate
	    COLLECT funnelStage = d.funnelStage WITH COUNT INTO length
	    RETURN { "collectorKey" : funnelStage, "collectorCount" : length }
;

AQL_PROFILE_TIMESERIES_COLLECTOR => 
	FOR d IN cdp_profile
	    FILTER d.createdAt >= @beginFilterDate AND d.createdAt <= @endFilterDate
	   	COLLECT dateTime = DATE_TRUNC(d.createdAt, @truncatedUnit), collectorKey = d.funnelStage WITH COUNT INTO length
	    RETURN { "dateTime" : dateTime, "collectorKey" : collectorKey, "collectorCount" : length }
;

########### AQL LEO CDP - SEGMENT  ########################################################################################################;

AQL_GET_SEGMENTS_BY_PAGINATION =>
	FOR d in cdp_segment  
	FILTER d.status >= 0
	SORT d.createdAt DESC
	LIMIT @startIndex,@numberResult 
	RETURN d
;

AQL_GET_SEGMENTS_TO_DELETE_FOREVER =>
	FOR d in cdp_segment  
	FILTER d.status < 0 AND LENGTH(d.campaignIds) == 0
	RETURN d
;

AQL_GET_SEGMENT_BY_ID =>
	FOR d in cdp_segment FILTER d._key == @id AND d.status >= 0
	RETURN d
;

########### AQL LEO CDP - CONTEXT_SESSION  ########################################################################################################;

AQL_GET_CONTEXT_SESSION_BY_KEY =>
	FOR e in cdp_contextsession FILTER e.sessionKey == @sessionKey  
	RETURN e
;

AQL_GET_CONTEXT_SESSIONS_BY_VISITOR_ID =>
	FOR e in cdp_contextsession FILTER e.visitorId == @visitorId  
	RETURN e
;

AQL_GET_CONTEXT_SESSIONS_BY_PROFILE_ID =>
	FOR e in cdp_contextsession FILTER e.profileId == @profileId  
	RETURN e
;

########### AQL LEO CDP - EVENTS QUERIES ########################################################################################################;

AQL_GET_TRACKING_EVENTS_BY_PROFILE_ID =>
	FOR e in cdp_trackingevent FILTER e.refProfileId == @refProfileId  
	SORT e.timestamp DESC
	LIMIT @startIndex,@numberResult 
	RETURN e
;

AQL_GET_TRACKING_EVENTS_BY_PROFILE_ID_AND_METRIC_NAME =>
	FOR e in cdp_trackingevent FILTER e.refProfileId == @refProfileId AND e.metricName == @metricName
	SORT e.timestamp DESC
	LIMIT @startIndex,@numberResult 
	RETURN e
;

AQL_GET_CONVERSION_EVENTS_BY_PROFILE_ID =>
	FOR e in cdp_trackingevent FILTER e.refProfileId == @refProfileId AND e.isConversion == true
	SORT e.timestamp DESC
	LIMIT @startIndex,@numberResult 
	RETURN e
;

AQL_GET_TRACKING_EVENTS_FOR_REPORTING_BY_PROFILE_ID =>
	FOR e in cdp_trackingevent FILTER e.refProfileId == @profileId
        LET refTouchpoint = (
            FOR t IN cdp_touchpoint
            FILTER t._key == e.refTouchpointId
            RETURN DISTINCT t
        )
        LET srcTouchpoint = (
            FOR t IN cdp_touchpoint
            FILTER t._key == e.srcTouchpointId
            RETURN DISTINCT t
        )
        RETURN {"metricName":e.metricName,"metricValue":e.metricValue,
                "browserName":e.browserName,"deviceName":e.deviceName,
                "deviceOS":e.deviceOS, "deviceType": e.deviceType,
                "environment":e.environment,"observerId":e.observerId,
                "createAt":e.createdAt,
                "refTouchpoint":refTouchpoint, 
                "srcTouchpoint": srcTouchpoint}
;

AQL_UPDATE_TRACKING_EVENT_STATE_PROCESSED =>
	FOR e IN cdp_trackingevent
	    FILTER e._key == @id
	    UPDATE e WITH { state: 1 } IN cdp_trackingevent
;


AQL_EVENT_COLLECTOR_TOTAL => 
	FOR e IN cdp_trackingevent
	    COLLECT metricName = e.metricName WITH COUNT INTO length
	    RETURN { "collectorKey" : metricName, "collectorCount" : length }
;

AQL_EVENT_COLLECTOR_TOTAL_IN_DATE_RANGE => 
	FOR e IN cdp_trackingevent
	    FILTER e.createdAt >= @beginFilterDate AND e.createdAt <= @endFilterDate
	    COLLECT metricName = e.metricName WITH COUNT INTO length
	    RETURN { "collectorKey" : metricName, "collectorCount" : length }
;

AQL_EVENT_TIMESERIES_COLLECTOR => 
	FOR e IN cdp_trackingevent
	    FILTER e.createdAt >= @beginFilterDate AND e.createdAt <= @endFilterDate
	   	COLLECT dateTime = DATE_TRUNC(e.createdAt, @truncatedUnit), collectorKey = e.metricName WITH COUNT INTO length
	    RETURN { "dateTime" : dateTime, "collectorKey" : collectorKey, "collectorCount" : length }
;

########### AQL LEO CDP - PRODUCT ITEM  ########################################################################################################;

AQL_GET_PRODUCT_ITEM_BY_ID =>
	FOR e in cdp_productitem FILTER e._key == @id  
	RETURN e
;

AQL_GET_PRODUCT_ITEMS => 
	FOR e in cdp_productitem 
	SORT e.createdAt DESC
	LIMIT @startIndex,@numberResult 
	RETURN e
;

AQL_GET_PRODUCT_ITEM_BY_FULL_URL =>
	FOR e in cdp_productitem FILTER e.fullUrl == @fullUrl  
	RETURN e
;


AQL_GET_PRODUCT_ITEMS_BY_FILTER =>
	FOR p in cdp_productitem  
	SORT p.createdAt DESC
	LIMIT @startIndex,@numberResult 
	RETURN p
;

########### AQL LEO CDP - DEVICE  ########################################################################################################;

AQL_GET_DEVICE_BY_ID =>
	FOR e in cdp_device FILTER e._key == @id
	RETURN e
;

############################################### END AQL  #####################################################################################
