<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
  <link href="nv.d3.css" rel="stylesheet" type="text/css">
    <script src="d3.min.js" charset="utf-8"></script>
    <script src="nv.d3.js"></script>

    <style>
        text {
            font: 12px sans-serif;
        }
        svg {
            display: block;
        }
         #linechart, svg {
            margin: 0px;
            padding: 0px;
            height: 500px;
            width: 100%;
        }

        .dashed {
            stroke-dasharray: 5,5;
        }
    </style>
</head>
<body class='with-3d-shadow with-transitions'>
<div style="position:absolute; top: 0; left: 0;">    
    <button onclick="expandLegend();">Expand/Contract Legend</button>
    <script>
        var expandLegend = function() {
            var exp = chart.legend.expanded();
            chart.legend.expanded(!exp);
            chart.update();
        }
    </script>
</div>
<div id="linechart"></div>
<script src="https://monitor.adsplay.net/js/moment.min.js" ></script>
<script>
    // Wrapping in nv.addGraph allows for '0 timeout render', stores rendered charts in nv.graphs, and may do more in the future... it's NOT required
    var chart;
    var data;

     nv.addGraph(function() {
        chart = nv.models.lineChart()
            .options({
                duration: 300,
                useInteractiveGuideline: true
            })
        ;

        // chart sub-models (ie. xAxis, yAxis, etc) when accessed directly, return themselves, not the parent chart, so need to chain separately
        chart.xAxis
            .axisLabel("Date")
            .tickFormat(function(x) {
                var s = new moment(x).format("YYYY-MM-DD");
                console.log(s);
                return s;
            })
            .staggerLabels(true)
        ;

        chart.yAxis
            .axisLabel('Impression')
            .tickFormat(function(d) {
                if (d == null) {
                    return 'N/A';
                }
                return d3.format(',.0d')(d);
            })
        ;

        data = buildData();

        d3.select('#linechart').append('svg')
            .datum(data)
            .call(chart);

        nv.utils.windowResize(chart.update);

        return chart;
    });

    function buildData() {
        var sin = [],
            sin2 = [],
            cos = [],
            rand = [],
            rand2 = [],
            sintest =[]
            ;

        // for (var i = 0; i < 100; i++) {
        //     // sin.push({x: i, y: i % 10 == 5 ? null : Math.sin(i/10) }); //the nulls are to show how defined works
        //     sintest.push({x: 1, y: 244150 });
        //     sin2.push({x: i, y: Math.sin(i/5) * 0.4 - 0.25});
        //     cos.push({x: i, y: .5 * Math.cos(i/10)});
        //     rand.push({x:i, y: Math.random() / 10});
        //     rand2.push({x: i, y: Math.cos(i/10) + Math.random() / 10 })
        // }
         sintest.push(
                        {x: 1464404146000, y: 34244 },
                        {x: 1465404146000, y: 24415 },
                        {x: 1466404146000, y: 344150 }                        
            );
         sin.push(
                        {x: 1466404146000, y: 344150 } ,
                        {x: 1467404146000, y: 255353 } ,
                        {x: 1468404146000, y: 423435 }
            );

        return [
            {
                // area: true,
                values: sin,
                key: "Sine Wave",
                color: "#ff7f0e",
                strokeWidth: 4,
                classed: 'dashed'
            },
            {
                values: sintest,
                key: "SineTest Wave",
                color: "#2ca02c",
                  strokeWidth: 2

                // area: true
            },
            // {
            //     values: rand,
            //     key: "Random Points",
            //     color: "#2222ff"
            // },
            // {
            //     values: rand2,
            //     key: "Random Cosine",
            //     color: "#667711",
            //     strokeWidth: 3.5
            // },
            // {
            //     area: true,
            //     values: sin2,
            //     key: "Fill opacity",
            //     color: "#EF9CFB",
            //     fillOpacity: .1
            // }
        ];
    }

</script>
</body>
</html>
